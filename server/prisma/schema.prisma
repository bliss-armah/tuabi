generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  name                  String
  email                 String    @unique
  phoneNumber           String    @unique
  password              String
  expoPushToken         String? 
  isSubscribed          Boolean   @default(false)
  subscriptionExpiresAt DateTime?
  resetCode             String?
  resetExpiresAt        DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  debtors       Debtor[]
  subscriptions Subscription[]
  transactions  Transaction[]
  debtHistory   DebtHistory[]
  reminders     Reminder[]

  @@map("users")
}

model Debtor {
  id          Int      @id @default(autoincrement())
  name        String
  phoneNumber String
  amountOwed  Float
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  debtHistory DebtHistory[]
  reminders   Reminder[]

  @@map("debtors")
}

model DebtHistory {
  id            Int      @id @default(autoincrement())
  debtorId      Int
  amountChanged Float
  note          String?
  timestamp     DateTime @default(now())
  action        String
  performedById Int

  // Relations
  debtor Debtor @relation(fields: [debtorId], references: [id])
  user   User   @relation(fields: [performedById], references: [id])

  @@map("debt_history")
}

model SubscriptionPlan {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  amount    Float
  currency  String
  duration  Int     // in days
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id                     Int      @id @default(autoincrement())
  userId                 Int
  planId                 Int
  plan                   SubscriptionPlan @relation(fields: [planId], references: [id])
  status                 String   @default("active")
  startDate              DateTime @default(now())
  endDate                DateTime
  paystackSubscriptionId String?
  paystackCustomerId     String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id                    Int      @id @default(autoincrement())
  userId                Int
  subscriptionId        Int?
  paystackTransactionId String   @unique
  paystackReference     String   @unique
  amount                Float
  currency              String   @default("GHS")
  status                String
  paymentMethod         String?
  description           String?
  transactionMetadata   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Reminder {
  id          Int      @id @default(autoincrement())
  debtorId    Int
  userId      Int
  title       String
  message     String
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  wasNotified Boolean @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  debtor Debtor @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}
